# Read the configuration file
$config = Get-Content "config.txt" -Raw | ConvertFrom-Json

# Define your GitHub repository information
$author = $config.Author
$repoName = $config.repoName

# Find the root directory of the repository
$repoRoot = git rev-parse --show-toplevel

# Check if there are any uncommitted changes in the working directory
$changes = git -C $repoRoot status --porcelain

if ($changes) {
    Write-Host "There are uncommitted changes in the working directory."
    $stashResponse = Read-Host "Do you want to stash the uncommitted changes? (yes/no)"
    
    if ($stashResponse -eq "yes") {
        git -C $repoRoot stash save "Auto-stash before updating"
    } else {
        Write-Host "Please commit or stash the changes before updating."
        exit 1
    }
}

# Get the branch name
$branch = Read-Host "Enter the branch name to update from"

# Set the Git credential for the repository
git -C $repoRoot remote set-url origin "https://github.com/$author/$repoName.git"

# Configure Git to use the credential manager
git -C $repoRoot config --global credential.helper manager

try {
    # Fetch the latest changes from the remote branch
    git -C $repoRoot fetch origin $branch
} catch {
    Write-Host "Error fetching the remote branch. Please check your credentials and the branch name."
    exit 1
}

# Check if the current branch is the specified branch
$currentBranch = git -C $repoRoot rev-parse --abbrev-ref HEAD

if ($currentBranch -ne $branch) {
    try {
        # Checkout the specified branch
        git -C $repoRoot checkout $branch
    } catch {
        Write-Host "Error checking out the specified branch. Please check the branch name."
        exit 1
    }
}

try {
    # Merge the latest changes from the remote branch
    git -C $repoRoot merge origin/$branch
} catch {
    Write-Host "Error merging the remote branch. Please resolve any conflicts manually."
    exit 1
}

# Output a success message
Write-Host "Project updated from branch $branch"
